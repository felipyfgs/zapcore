#!/bin/bash

# =============================================================================
# WAMEX - Script Master de Migra√ß√£o para Estrutura Idiom√°tica Go
# =============================================================================
# Este script orquestra toda a migra√ß√£o da estrutura atual para a nova
# estrutura idiom√°tica seguindo as melhores pr√°ticas do Go.
#
# Uso: ./scripts/migration-master.sh [fase]
# Exemplo: ./scripts/migration-master.sh 1    # Executa apenas a fase 1
#          ./scripts/migration-master.sh all  # Executa todas as fases
# =============================================================================

set -e  # Parar em caso de erro
set -u  # Parar se vari√°vel n√£o definida

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
BACKUP_DIR="${PROJECT_ROOT}/migration-backup"
LOG_FILE="${PROJECT_ROOT}/migration.log"

# Fun√ß√µes utilit√°rias
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}‚ùå $1${NC}" | tee -a "$LOG_FILE"
    exit 1
}

# Fun√ß√£o para validar pr√©-requisitos
validate_prerequisites() {
    log "Validando pr√©-requisitos..."
    
    # Verificar se estamos no diret√≥rio correto
    if [[ ! -f "go.mod" ]]; then
        error "go.mod n√£o encontrado. Execute o script a partir da raiz do projeto."
    fi
    
    # Verificar se Go est√° instalado
    if ! command -v go &> /dev/null; then
        error "Go n√£o est√° instalado ou n√£o est√° no PATH."
    fi
    
    # Verificar vers√£o do Go
    GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
    log "Vers√£o do Go: $GO_VERSION"
    
    # Verificar se git est√° dispon√≠vel
    if ! command -v git &> /dev/null; then
        error "Git n√£o est√° instalado ou n√£o est√° no PATH."
    fi
    
    success "Pr√©-requisitos validados"
}

# Fun√ß√£o para criar backup
create_backup() {
    log "Criando backup da estrutura atual..."
    
    # Criar diret√≥rio de backup
    mkdir -p "$BACKUP_DIR"
    
    # Fazer backup com git
    git add -A
    git commit -m "backup: estrutura atual antes da migra√ß√£o ($(date))" || true
    git tag -a "pre-migration-backup-$(date +%Y%m%d-%H%M%S)" -m "Backup antes da migra√ß√£o para estrutura idiom√°tica"
    
    # Criar backup f√≠sico tamb√©m
    cp -r internal "$BACKUP_DIR/internal-backup"
    cp -r cmd "$BACKUP_DIR/cmd-backup"
    cp -r pkg "$BACKUP_DIR/pkg-backup"
    cp -r configs "$BACKUP_DIR/configs-backup" 2>/dev/null || true
    
    success "Backup criado em $BACKUP_DIR"
}

# Fun√ß√£o para validar compila√ß√£o
validate_compilation() {
    log "Validando compila√ß√£o..."
    
    cd "$PROJECT_ROOT"
    
    # Limpar m√≥dulos
    go mod tidy
    
    # Tentar compilar
    if go build ./...; then
        success "Compila√ß√£o bem-sucedida"
    else
        error "Falha na compila√ß√£o"
    fi
    
    # Executar testes
    if go test ./...; then
        success "Testes executados com sucesso"
    else
        warning "Alguns testes falharam, mas continuando..."
    fi
}

# Fun√ß√£o para executar fase espec√≠fica
execute_phase() {
    local phase=$1
    log "Executando Fase $phase..."
    
    case $phase in
        1)
            execute_phase_1
            ;;
        2)
            execute_phase_2
            ;;
        3)
            execute_phase_3
            ;;
        4)
            execute_phase_4
            ;;
        5)
            execute_phase_5
            ;;
        6)
            execute_phase_6
            ;;
        7)
            execute_phase_7
            ;;
        8)
            execute_phase_8
            ;;
        9)
            execute_phase_9
            ;;
        10)
            execute_phase_10
            ;;
        *)
            error "Fase $phase n√£o reconhecida"
            ;;
    esac
    
    # Validar ap√≥s cada fase
    validate_compilation
    success "Fase $phase conclu√≠da com sucesso"
}

# Implementa√ß√£o das fases (ser√° expandida nos pr√≥ximos scripts)
execute_phase_1() {
    log "Fase 1: Prepara√ß√£o e Estrutura Base"
    bash "$PROJECT_ROOT/scripts/phase-1-setup.sh"
}

execute_phase_2() {
    log "Fase 2: Migra√ß√£o do Domain Layer"
    bash "$PROJECT_ROOT/scripts/phase-2-domain.sh"
}

execute_phase_3() {
    log "Fase 3: Migra√ß√£o da Camada de Infraestrutura"
    bash "$PROJECT_ROOT/scripts/phase-3-infra.sh"
}

execute_phase_4() {
    log "Fase 4: Migra√ß√£o da Camada de Use Cases"
    bash "$PROJECT_ROOT/scripts/phase-4-usecase.sh"
}

execute_phase_5() {
    log "Fase 5: Migra√ß√£o da Camada de Transport"
    bash "$PROJECT_ROOT/scripts/phase-5-transport.sh"
}

execute_phase_6() {
    log "Fase 6: Migra√ß√£o da Camada de Repository"
    bash "$PROJECT_ROOT/scripts/phase-6-repository.sh"
}

execute_phase_7() {
    log "Fase 7: Reorganiza√ß√£o de Shared e PKG"
    bash "$PROJECT_ROOT/scripts/phase-7-shared.sh"
}

execute_phase_8() {
    log "Fase 8: Migra√ß√£o do Entry Point"
    bash "$PROJECT_ROOT/scripts/phase-8-entrypoint.sh"
}

execute_phase_9() {
    log "Fase 9: Migra√ß√£o de Testes"
    bash "$PROJECT_ROOT/scripts/phase-9-tests.sh"
}

execute_phase_10() {
    log "Fase 10: Limpeza e Valida√ß√£o Final"
    bash "$PROJECT_ROOT/scripts/phase-10-cleanup.sh"
}

# Fun√ß√£o principal
main() {
    local phase=${1:-"all"}
    
    log "=== INICIANDO MIGRA√á√ÉO PARA ESTRUTURA IDIOM√ÅTICA GO ==="
    log "Fase solicitada: $phase"
    
    # Validar pr√©-requisitos
    validate_prerequisites
    
    # Criar backup
    create_backup
    
    # Validar estado inicial
    validate_compilation
    
    if [[ "$phase" == "all" ]]; then
        # Executar todas as fases
        for i in {1..10}; do
            execute_phase $i
        done
    else
        # Executar fase espec√≠fica
        execute_phase "$phase"
    fi
    
    log "=== MIGRA√á√ÉO CONCLU√çDA COM SUCESSO ==="
    success "Nova estrutura idiom√°tica implementada!"
    
    # Mostrar resumo
    echo ""
    echo "üìä RESUMO DA MIGRA√á√ÉO:"
    echo "‚îú‚îÄ‚îÄ Backup criado em: $BACKUP_DIR"
    echo "‚îú‚îÄ‚îÄ Log completo em: $LOG_FILE"
    echo "‚îú‚îÄ‚îÄ Tag de backup: pre-migration-backup-$(date +%Y%m%d-%H%M%S)"
    echo "‚îî‚îÄ‚îÄ Status: ‚úÖ SUCESSO"
    echo ""
    echo "üöÄ Pr√≥ximos passos:"
    echo "1. Testar a aplica√ß√£o: go run cmd/wamex/main.go"
    echo "2. Executar testes: go test ./..."
    echo "3. Verificar endpoints: curl http://localhost:8080/health"
}

# Executar fun√ß√£o principal
main "$@"
